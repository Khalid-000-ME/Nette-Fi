<svg viewBox="0 0 1600 1400" xmlns="http://www.w3.org/2000/svg">
  <!-- Define styles -->
  <defs>
    <style>
      .component-box { fill: #2d3748; stroke: #4a5568; stroke-width: 2; }
      .asi-box { fill: #4c1d95; stroke: #7c3aed; stroke-width: 2; }
      .text { fill: #e2e8f0; font-family: 'Excalifont', sans-serif; font-size: 14px; }
      .label { fill: #a0aec0; font-family: 'Excalifont', sans-serif; font-size: 12px; }
      .arrow { stroke: #718096; stroke-width: 2; fill: none; }
      .arrow-thick { stroke: #48bb78; stroke-width: 3; fill: none; }
      .arrow-data { stroke: #4299e1; stroke-width: 2; stroke-dasharray: 5,5; fill: none; }
      .arrow-asi { stroke: #7c3aed; stroke-width: 3; fill: none; }
      .arrow-head { fill: #718096; }
      .arrow-head-green { fill: #48bb78; }
      .arrow-head-blue { fill: #4299e1; }
      .arrow-head-purple { fill: #7c3aed; }
      .parallel-box { fill: none; stroke: #ed8936; stroke-width: 2; stroke-dasharray: 10,5; }
      .netting-box { fill: #2a4365; stroke: #3182ce; stroke-width: 2; }
      .savings-text { fill: #68d391; font-family: 'Excalifont', sans-serif; font-weight: bold; }
      .payroll-text { fill: #fbbf24; font-family: 'Excalifont', sans-serif; font-weight: bold; }
    </style>
    
    <!-- Arrow markers -->
    <marker id="arrowhead-green" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon class="arrow-head-green" points="0 0, 10 3, 0 6" />
    </marker>
    <marker id="arrowhead-blue" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon class="arrow-head-blue" points="0 0, 10 3, 0 6" />
    </marker>
    <marker id="arrowhead-purple" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon class="arrow-head-purple" points="0 0, 10 3, 0 6" />
    </marker>
  </defs>
  
  <!-- Background -->
  <rect width="1600" height="1400" fill="#1a202c"/>
  
  <!-- Component boxes at top -->
  <rect class="component-box" x="50" y="30" width="200" height="80" rx="5"/>
  <text class="text" x="150" y="65" text-anchor="middle">User Frontend</text>
  <text class="label" x="150" y="85" text-anchor="middle">(Payroll Interface)</text>
  
  <rect class="asi-box" x="300" y="30" width="200" height="80" rx="5"/>
  <text class="text" x="400" y="65" text-anchor="middle">ASI Agents</text>
  <text class="label" x="400" y="85" text-anchor="middle">(Main Interface)</text>
  
  <rect class="component-box" x="550" y="30" width="200" height="80" rx="5"/>
  <text class="text" x="650" y="65" text-anchor="middle">Backend API</text>
  <text class="label" x="650" y="85" text-anchor="middle">(Processing Layer)</text>
  
  <rect class="component-box" x="800" y="30" width="250" height="80" rx="5"/>
  <text class="text" x="925" y="65" text-anchor="middle">NettedSwapPayroll.sol</text>
  <text class="label" x="925" y="85" text-anchor="middle">(Smart Contract)</text>
  
  <rect class="component-box" x="1100" y="30" width="200" height="80" rx="5"/>
  <text class="text" x="1200" y="65" text-anchor="middle">Arcology DevNet</text>
  <text class="label" x="1200" y="85" text-anchor="middle">(Parallel Execution)</text>
  
  <rect class="component-box" x="1350" y="30" width="200" height="80" rx="5"/>
  <text class="text" x="1450" y="65" text-anchor="middle">Multiprocess</text>
  <text class="label" x="1450" y="85" text-anchor="middle">(100 Processors)</text>
  
  <!-- Vertical lines for components -->
  <line class="arrow" x1="150" y1="110" x2="150" y2="1350"/>
  <line class="arrow" x1="400" y1="110" x2="400" y2="1350"/>
  <line class="arrow" x1="650" y1="110" x2="650" y2="1350"/>
  <line class="arrow" x1="925" y1="110" x2="925" y2="1350"/>
  <line class="arrow" x1="1200" y1="110" x2="1200" y2="1350"/>
  <line class="arrow" x1="1450" y1="110" x2="1450" y2="1350"/>
  
  <!-- Flow sequence -->
  
  <!-- 1. User submits payroll batch -->
  <path class="arrow-thick" d="M 150 150 L 400 150" marker-end="url(#arrowhead-green)"/>
  <text class="payroll-text" x="275" y="140" text-anchor="middle">Submit Payroll Batch</text>
  <text class="label" x="275" y="165" text-anchor="middle">Employee payments in different tokens</text>
  
  <!-- 2. ASI processes and validates -->
  <path class="arrow-asi" d="M 400 200 L 650 200" marker-end="url(#arrowhead-purple)"/>
  <text class="text" x="525" y="190" text-anchor="middle">ASI Agent Processing</text>
  <text class="label" x="525" y="215" text-anchor="middle">Validate transactions and optimize</text>
  
  <!-- 3. Backend receives batch -->
  <path class="arrow-thick" d="M 650 250 L 925 250" marker-end="url(#arrowhead-green)"/>
  <text class="text" x="787" y="240" text-anchor="middle">Send to Smart Contract</text>
  <text class="label" x="787" y="265" text-anchor="middle">Batch: ETH to USDC, ETH to DAI, USDC to ETH</text>
  
  <!-- 4. Arcology parallel processing -->
  <rect class="parallel-box" x="1100" y="300" width="450" height="200"/>
  <text class="text" x="1325" y="290" text-anchor="middle" fill="#ed8936">ARCOLOGY PARALLEL EXECUTION</text>
  
  <path class="arrow-thick" d="M 925 320 L 1200 320" marker-end="url(#arrowhead-green)"/>
  <text class="text" x="1062" y="310" text-anchor="middle">Trigger Multiprocess</text>
  <text class="label" x="1062" y="335" text-anchor="middle">100 concurrent processors</text>
  
  <!-- Multiprocess execution -->
  <path class="arrow-thick" d="M 1200 360 L 1450 360" marker-end="url(#arrowhead-green)"/>
  <text class="text" x="1325" y="350" text-anchor="middle">Processor 1: Alice ETH to USDC</text>
  
  <path class="arrow-thick" d="M 1200 390 L 1450 390" marker-end="url(#arrowhead-green)"/>
  <text class="text" x="1325" y="380" text-anchor="middle">Processor 2: Bob ETH to DAI</text>
  
  <path class="arrow-thick" d="M 1200 420 L 1450 420" marker-end="url(#arrowhead-green)"/>
  <text class="text" x="1325" y="410" text-anchor="middle">Processor 3: Carol USDC to ETH</text>
  
  <path class="arrow-thick" d="M 1200 450 L 1450 450" marker-end="url(#arrowhead-green)"/>
  <text class="text" x="1325" y="440" text-anchor="middle">Processors 4-100: Thread-safe</text>
  
  <!-- Netting optimization box -->
  <rect class="netting-box" x="800" y="520" width="450" height="140"/>
  <text class="text" x="1025" y="545" text-anchor="middle" fill="#3182ce">NETTING OPTIMIZATION</text>
  <text class="label" x="1025" y="570" text-anchor="middle">Opposite trades detected:</text>
  <text class="label" x="1025" y="590" text-anchor="middle">Alice ETH to USDC vs Carol USDC to ETH</text>
  <text class="label" x="1025" y="610" text-anchor="middle">Netted internally - No pool interaction</text>
  <text class="label" x="1025" y="630" text-anchor="middle">Bob ETH to DAI - Executed via Uniswap pool</text>
  <text class="savings-text" x="1025" y="650" text-anchor="middle">Gas saved: 50,000 per netted pair</text>
  
  <!-- 5. Transactions mined on chain -->
  <rect class="netting-box" x="1100" y="700" width="450" height="100"/>
  <text class="text" x="1325" y="725" text-anchor="middle" fill="#3182ce">TRANSACTIONS MINED ON DEVNET</text>
  <text class="label" x="1325" y="750" text-anchor="middle">Block confirmed with payroll transactions</text>
  <text class="label" x="1325" y="770" text-anchor="middle">Events emitted from smart contract</text>
  
  <!-- 6. Chain events flow back -->
  <path class="arrow-data" d="M 1200 820 L 925 820" marker-end="url(#arrowhead-blue)"/>
  <text class="text" x="1062" y="810" text-anchor="middle">Chain Events</text>
  <text class="label" x="1062" y="835" text-anchor="middle">Gas saved, netting details, swap results</text>
  
  <path class="arrow-data" d="M 925 870 L 650 870" marker-end="url(#arrowhead-blue)"/>
  <text class="text" x="787" y="860" text-anchor="middle">Process Event Data</text>
  <text class="label" x="787" y="885" text-anchor="middle">Extract analytics and metrics</text>
  
  <!-- 7. ASI processes results -->
  <path class="arrow-asi" d="M 650 920 L 400 920" marker-end="url(#arrowhead-purple)"/>
  <text class="text" x="525" y="910" text-anchor="middle">ASI Analytics Processing</text>
  <text class="label" x="525" y="935" text-anchor="middle">Calculate savings, efficiency metrics</text>
  
  <!-- 8. Results sent to frontend -->
  <path class="arrow-thick" d="M 400 970 L 150 970" marker-end="url(#arrowhead-green)"/>
  <text class="text" x="275" y="960" text-anchor="middle">Send Results to User</text>
  <text class="label" x="275" y="985" text-anchor="middle">Payroll complete with analytics</text>
  
  <!-- 9. Final payroll results -->
  <rect class="netting-box" x="50" y="1020" width="700" height="160"/>
  <text class="text" x="400" y="1045" text-anchor="middle" fill="#68d391">PAYROLL EXECUTION COMPLETE</text>
  <text class="payroll-text" x="400" y="1070" text-anchor="middle">All employees paid in their preferred tokens</text>
  <text class="label" x="400" y="1095" text-anchor="middle">Alice: Received USDC (netted with Carol)</text>
  <text class="label" x="400" y="1115" text-anchor="middle">Bob: Received DAI (swapped via Uniswap pool)</text>
  <text class="label" x="400" y="1135" text-anchor="middle">Carol: Received ETH (netted with Alice)</text>
  <text class="savings-text" x="400" y="1160" text-anchor="middle">Gas Savings: 67% | MEV Protection: 100%</text>
  
  <!-- 10. System benefits summary -->
  <rect class="netting-box" x="800" y="1200" width="750" height="120"/>
  <text class="text" x="1175" y="1225" text-anchor="middle" fill="#68d391">SYSTEM BENEFITS ACHIEVED</text>
  <text class="label" x="1175" y="1250" text-anchor="middle">100 Parallel Processors | Thread-Safe Execution | Netting Optimization</text>
  <text class="label" x="1175" y="1270" text-anchor="middle">Cross-Token Payroll | ASI Agent Interface | Real-time Analytics</text>
  <text class="savings-text" x="1175" y="1295" text-anchor="middle">Revolutionary DeFi Payroll System</text>

</svg>